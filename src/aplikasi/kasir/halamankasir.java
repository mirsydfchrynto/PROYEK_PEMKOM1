/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package aplikasi.kasir;

import aplikasi.Login;
import aplikasi.halamanprofil;
import aplikasi.koneksi;
import aplikasi.userprofile;
import java.awt.Frame;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author LABKOM
 */
public class halamankasir extends javax.swing.JFrame {

    userprofile pr;

    /**
     * Creates new form KasirPage
     * @param up
     */
    public halamankasir(userprofile up) {
        initComponents();
        this.pr = up;
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
    }
    
     public halamankasir() {
        initComponents();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtProduk = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        lblTotalHarga = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtUangBayar = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        lbluangKembali = new javax.swing.JLabel();
        tombolCheckout = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCart = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 153, 255));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(800, 80));

        txtProduk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProdukActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Kode Product");

        jButton2.setBackground(new java.awt.Color(255, 0, 0));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("DELETE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtProduk, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap(381, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtProduk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel6.setBackground(new java.awt.Color(51, 153, 255));

        lblTotalHarga.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblTotalHarga.setForeground(new java.awt.Color(255, 0, 0));
        lblTotalHarga.setText("Rp. 0,-");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Total Harga : ");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Nominal : ");

        txtUangBayar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtUangBayar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUangBayarActionPerformed(evt);
            }
        });
        txtUangBayar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtUangBayarKeyReleased(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Kembalian : ");

        lbluangKembali.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lbluangKembali.setForeground(new java.awt.Color(0, 153, 51));
        lbluangKembali.setText("Rp 0,-");

        tombolCheckout.setBackground(new java.awt.Color(255, 102, 0));
        tombolCheckout.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        tombolCheckout.setForeground(new java.awt.Color(255, 255, 255));
        tombolCheckout.setText("Checkout");
        tombolCheckout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tombolCheckout.setEnabled(false);
        tombolCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tombolCheckoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtUangBayar, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTotalHarga, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbluangKembali, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 194, Short.MAX_VALUE)
                .addComponent(tombolCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(117, 117, 117))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTotalHarga)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUangBayar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(tombolCheckout))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(lbluangKembali, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel6, java.awt.BorderLayout.PAGE_END);

        tblCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NAMA PRODUK", "QTY", "HARGA"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCart.setRowHeight(30);
        jScrollPane1.setViewportView(tblCart);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("Menu");

        jMenuItem2.setText("Laporan Keuangan");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("RiwayatTransaksi");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Setting");

        jMenuItem4.setText("Profile");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtProdukActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProdukActionPerformed
        try {
            DefaultTableModel model = (DefaultTableModel) tblCart.getModel();
            model.addTableModelListener((TableModelEvent e) -> {
                int row = e.getFirstRow();
                int column = e.getColumn();
                if (row >= 0 && column >= 0) {
                    updateTotalHarga();
                    endsKetikUangPembayaran();
                }
            });

            String kode = txtProduk.getText();
            Connection K = koneksi.Go();
            Statement S = K.createStatement();
            String Q = "SELECT * FROM products WHERE product_code='" + kode + "'";
            ResultSet R = S.executeQuery(Q);
            while (R.next()) {
                int id = R.getInt("id");
                String nama = R.getString("product_name");
                String harga = R.getString("product_price_s");

                // Check if the product is already in the cart
                int row = tblCart.getRowCount();
                boolean ada = false;
                int QTY = 0;
                int baris = 0;
                if (row > 0) { 
                    for (int i = 0; i < row; i++) { 
                        int id_produk = Integer.parseInt(tblCart.getValueAt(i, 0).toString()); 
                        if (id_produk == id) { 
                            ada = true; 
                            baris = i; 
                            QTY = Integer.parseInt(tblCart.getValueAt(i, 2).toString()) + 1; 
                            break; 
                        }
                    }
                    if (ada) {
                        tblCart.setValueAt(QTY, baris, 2);
                        updateTotalHarga();
                    } else {
                        Object[] data = {id, nama, 1, harga};
                        model.addRow(data);
                    }
                } else {
                    Object[] data = {id, nama, 1, harga};
                    model.addRow(data);
                }
            }

            // Clear the text field after processing
            txtProduk.setText("");

            updateTotalHarga();
            endsKetikUangPembayaran();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_txtProdukActionPerformed

    private void txtUangBayarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUangBayarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUangBayarActionPerformed

    private void txtUangBayarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUangBayarKeyReleased
        endsKetikUangPembayaran();
    }//GEN-LAST:event_txtUangBayarKeyReleased

    private void tombolCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tombolCheckoutActionPerformed
        // TODO add your handling code here:  
        checkout();

    }//GEN-LAST:event_tombolCheckoutActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        delFromCart();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        this.setVisible(false);
        laporanharian lk = new laporanharian(this.pr);
        lk.setVisible(true);
        lk.setExtendedState(JFrame.MAXIMIZED_BOTH);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        this.setVisible(false);
        riwayatTR rt = new riwayatTR(this.pr);
        rt.setVisible(true);
        rt.setExtendedState(JFrame.MAXIMIZED_BOTH);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        halamanprofil hp = new halamanprofil(this.pr); // Kirim objek userprofile
        hp.setVisible(true); // Tampilkan halaman profil
        this.dispose();
        
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(halamankasir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(halamankasir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(halamankasir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(halamankasir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new halamankasir().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTotalHarga;
    private javax.swing.JLabel lbluangKembali;
    private javax.swing.JTable tblCart;
    private javax.swing.JButton tombolCheckout;
    private javax.swing.JTextField txtProduk;
    private javax.swing.JTextField txtUangBayar;
    // End of variables declaration//GEN-END:variables


    private void updateTotalHarga() {
        try {
            double total = 0;
            int r = tblCart.getRowCount();
            for (int i = 0; i < r; i++) {
                double QTY = Double.parseDouble(tblCart.getValueAt(i, 2).toString());
                double PRC = Double.parseDouble(tblCart.getValueAt(i, 3).toString());
                total += (QTY * PRC);
            }
            lblTotalHarga.setText("Rp " + (long) total);
            
        } catch (NumberFormatException e) {
        }
    }

    private void delFromCart() {
        int b = tblCart.getSelectedRow();
        if (b != -1) {
            DefaultTableModel m = (DefaultTableModel) tblCart.getModel();
            m.removeRow(b);
            
            
            updateTotalHarga();
            endsKetikUangPembayaran();
        } else {
            JOptionPane.showMessageDialog(this, "Anda belum memilih data");
        }
    }

    private void endsKetikUangPembayaran() {
        int r = tblCart.getRowCount();
        if (r > 0) {
            String lbl = lblTotalHarga.getText(); //Rp 12000
            String[] arrayHarga = lbl.split(" ");
            long harga = Long.parseLong(arrayHarga[1]);

            String bayar = txtUangBayar.getText();
            if (!bayar.isEmpty()) {
                long uangbayar = Long.parseLong(bayar);
                long uangkembali = uangbayar - harga;
                lbluangKembali.setText("Rp "+uangkembali); 
                
                if(uangbayar >= harga){
                    tombolCheckout.setEnabled(true); 
                }else {
                    tombolCheckout.setEnabled(false); 
                }
            }else{
                lbluangKembali.setText("Rp "+0);
                tombolCheckout.setEnabled(false); 
            }
        }
    }
    
    
    
    private void checkout() {
        Connection K = null;
        PreparedStatement insertTransaksi = null;
        PreparedStatement insertDetailTransaksi = null;
        PreparedStatement updateStok = null;
        String uang_kembali = lbluangKembali.getText(); // Uang kembalian dari GUI
        String uang_pembayaran = lblTotalHarga.getText();  // Uang pembayaran dari GUI

        try {
            // Mulai koneksi dan nonaktifkan auto-commit
            K = koneksi.Go();
            K.setAutoCommit(false);

            // Ambil tanggal transaksi
            SimpleDateFormat SDF = new SimpleDateFormat("yyyy-MM-dd");
            String tanggalTransaksi = SDF.format(new Date());

            // Data kasir
            int idKasir = pr.getId();

            // Hitung total harga dari keranjang
            DefaultTableModel model = (DefaultTableModel) tblCart.getModel();
            double totalTransaksi = 0;
            for (int i = 0; i < model.getRowCount(); i++) {
                int qty = Integer.parseInt(model.getValueAt(i, 2).toString());
                double harga = Double.parseDouble(model.getValueAt(i, 3).toString());
                totalTransaksi += qty * harga;
            }

            // Masukkan data ke tabel transaksi
            String insertTransaksiQuery = "INSERT INTO transaksi (id_akun, tanggal_transaksi, total_harga) VALUES (?, ?, ?)";
            insertTransaksi = K.prepareStatement(insertTransaksiQuery, Statement.RETURN_GENERATED_KEYS);
            insertTransaksi.setInt(1, idKasir);
            insertTransaksi.setString(2, tanggalTransaksi);
            insertTransaksi.setDouble(3, totalTransaksi);
            insertTransaksi.executeUpdate();

            // Ambil ID transaksi yang baru saja dibuat
            ResultSet rs = insertTransaksi.getGeneratedKeys();
            int idTransaksi = 0;
            if (rs.next()) {
                idTransaksi = rs.getInt(1);
            }

            // Masukkan data ke tabel detail_transaksi
            String insertDetailTransaksiQuery = "INSERT INTO transaksi_detail (id_transaksi, id_produk, id_kasir, jumlah_produk,"
                    + "harga_satuan, total_harga_produk, tanggal_transaksi) VALUES (?, ?, ?, ?, ?, ?, ?)";
            insertDetailTransaksi = K.prepareStatement(insertDetailTransaksiQuery);

            String updateStokQuery = "UPDATE products SET product_stock = product_stock - ? WHERE id = ?";
            updateStok = K.prepareStatement(updateStokQuery);

            for (int i = 0; i < model.getRowCount(); i++) {
                int idProduk = Integer.parseInt(model.getValueAt(i, 0).toString());
                int qty = Integer.parseInt(model.getValueAt(i, 2).toString());
                double harga = Double.parseDouble(model.getValueAt(i, 3).toString());
                double totalHargaDetail = qty * harga;

                // Masukkan detail transaksi
                insertDetailTransaksi.setInt(1, idTransaksi);
                insertDetailTransaksi.setInt(2, idProduk);
                insertDetailTransaksi.setInt(3, idKasir);
                insertDetailTransaksi.setInt(4, qty);
                insertDetailTransaksi.setDouble(5, harga);
                insertDetailTransaksi.setDouble(6, totalHargaDetail);
                insertDetailTransaksi.setString(7, tanggalTransaksi);
                insertDetailTransaksi.executeUpdate();

                // Update stok produk
                updateStok.setInt(1, qty);
                updateStok.setInt(2, idProduk);
                updateStok.executeUpdate();
            }

            // Commit transaksi
            K.commit();

            // Tampilkan nota menggunakan setData
            nota1 notaDialog = new nota1(this, true);
            notaDialog.setData(
                    pr.getNama(), // Nama kasir
                    tanggalTransaksi, // Tanggal transaksi
                    idTransaksi, // ID transaksi
                    totalTransaksi, // Total transaksi
                    model, // Model tabel belanja
                    uang_kembali, // Uang kembalian
                    uang_pembayaran // Uang pembayaran
            );
            notaDialog.setVisible(true);

            // Reset tabel keranjang
            model.setRowCount(0);

            JOptionPane.showMessageDialog(this, "Checkout berhasil!");
        } catch (SQLException e) {
            // Rollback jika terjadi kesalahan
            if (K != null) {
                try {
                    K.rollback();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Gagal melakukan rollback: " + ex.getMessage());
                }
            }
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage());
        } finally {
            // Tutup semua resource
            try {
                if (insertTransaksi != null) {
                    insertTransaksi.close();
                }
                if (insertDetailTransaksi != null) {
                    insertDetailTransaksi.close();
                }
                if (updateStok != null) {
                    updateStok.close();
                }
                if (K != null) {
                    K.setAutoCommit(true);
                    K.close();
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Gagal menutup koneksi: " + e.getMessage());
            }
        }
    }
    
    
    
}
